%% ; -*- mode: Erlang;-*-
%%------------------------------------------------------------------------------
%% Copyright (c) 2013 Vasil Kolarov
%%
%% Licensed under the Apache License, Version 2.0 (the "License");
%% you may not use this file except in compliance with the License.
%% You may obtain a copy of the License at
%%
%%     http://www.apache.org/licenses/LICENSE-2.0
%%
%% Unless required by applicable law or agreed to in writing, software
%% distributed under the License is distributed on an "AS IS" BASIS,
%% WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
%% See the License for the specific language governing permissions and
%% limitations under the License.
%%------------------------------------------------------------------------------

-module( {{stmtName}} ).

-behaviour(gen_fsm).

-compile([{parse_transform, lager_transform},
	  {parse_transform, ms_transform},
	  {parse_transform, qlc}]).

-export([init/1, handle_info/3, handle_event/3, handle_sync_event/3, code_change/4, terminate/3]).
-export([start_link/1]).

-record(state_data,{
	  owner,
	  events = [ {{ eventList|join:", " }} ] ,
	  timeout = {{ timeout }},
	  output = []
}).

start_link(Owner) ->
    gen_fsm:start_link( {{stmtName}}, [Owner, #state_data{}], []).

init([Owner, StateData]) ->
    {% for eventName in eventList %}
       gproc:reg({p, l, {Owner, {{eventName}} } }),
    {% endfor %}
    gproc:reg({p, l, get_result}),
    lager:debug("Starting: {{stmtName}}, Owner: ~p, PID: ~p ",[Owner, self()]),
    new_window(),  
    %%gen_fsm:start_timer(StateData#state_data.timeout, new_time_window),  
    {ok, {{ eventList|first }} , #state_data{owner = Owner}}.

%% Internal functions
create_match_spec(Event, Oldest) ->
    ets:fun2ms(fun({ {Time,'_'},Value}) when Time >= Oldest andalso element(1,Value)==Event  -> Value end).
    
    
create_from_qh(MatchSpec, Reservoir) ->
     ets:table(Reservoir, [{traverse, {select, MatchSpec}}]).

send_result(StateData) -> %%TODO

    {{resultsetStmt}}
 
    ResultSet = qlc:e(QH),    
    lager:debug("---> Result Set: ~p", [ResultSet]),

    FirstRec = hd(ResultSet),
    Key = rivus_cep_aggregation:get_group_key(FirstRec),
    
    Result = case length(tuple_to_list(FirstRec)) == length(tuple_to_list(Key)) of
	      true -> ResultSet; %% there are no aggregations in the 'select' clause
	      false -> rivus_cep_aggregation:eval_resultset(test_stmt, ResultSet, rivus_cep_aggregation:new_state())
	  end,
    gproc:send({p, l, {StateData#state_data.owner, result_subscribers}}, Result).

new_window() ->
    rivus_cep_window:new( {{stmtName}}, slide, {{timeout}} ).

%% FSM state functions

{% for eventName in eventList %}
{{eventName}}(timeout, StateData) ->
    lager:debug("State: ~p got timeout. ",[{{eventName}}]),
    new_window(),
    {next_state, {{ eventList|first }} ,  StateData};
{{eventName}}({ timeout, Ref, Msg}, StateData) ->
    lager:debug("State: ~p got timeout with Msg: ~p",[{{eventName}}, Msg]),
    new_window(),
    {next_state, {{ eventList|first }} ,  StateData}.		  
{% endfor %}



%% gen_fsm functions

{% for eventName in eventList %}
handle_info({ {{ eventName }} , Event}, {{ eventName }} , StateData) ->
    lager:debug("handle_info Event: ~p",[Event]),
    rivus_cep_window:update( {{stmtName}}, Event),
    %%gen_fsm:send_event( {{ eventName }}, Event ),
    {% if forloop.last  %}
        send_result(StateData),
        {next_state, {{ eventList|first }} ,  StateData};
    {% else %}
        {next_state, {{ eventList|next:forloop.counter }} ,  StateData};
    {% endif %}
{% endfor %}
handle_info(Info, StateName, StateData) ->
    lager:debug("Statement: ~p,  handle_info got event: ~p in state: ~p. Will do nothing ...",[ {{stmtName}} ,Info, StateName]),
    new_window(),
    {next_state, {{ eventList|first }}, StateData}.

handle_event(Event, StateName, StateData) ->
    lager:debug("Statement: ~p,  handle_event got event: ~p in state: ~p. Will do nothing ...",[ {{stmtName}} ,Event, StateName]),
    new_window(),
    {next_state, {{ eventList|first }}, StateData}.

handle_sync_event(Event, StateName, StateData) ->
    lager:debug("Statement: ~p,  handle_sync_event got event: ~p in state: ~p. Will do nothing ...",[ {{stmtName}} ,Event, StateName]),
    new_window(),
    {next_state, {{ eventList|first }}, StateData}.

terminate(Reason, StateName, StateData) ->
    ok.

code_change(OldVsn, StateName, StateData, Extra) ->
    {ok, StateName, StateData}.
